{"version":3,"sources":["components/DashBoard/Container/index.tsx","components/Column4/index.tsx","components/DashBoard/withContainer.tsx"],"names":["Container","props","children","attr","id","x","y","w","h","deg","opacity","styles","width","height","left","top","transform","style","className","WithContainer","data","config","type","boxRef","useRef","defaultOption","tooltip","trigger","axisPointer","legend","right","textStyle","color","grid","bottom","containLabel","yAxis","splitLine","show","lineStyle","xAxis","axisTick","series","name","stack","emphasis","focus","itemStyle","echarts","LinearGradient","offset","label","position","fontSize","formatter","params","dataIndex","rich","a","lineHeight","b","useEffect","element","current","myChart","option","setOption","ref","WrappedComponent","ComponentConfig","cacheRepeatRequest","source","useState","componentData"],"mappings":"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","file":"static/js/19.379a448d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Attr {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    deg: number;\r\n    opacity: number;\r\n}\r\n\r\ninterface Props {\r\n    attr: Attr\r\n    id: string\r\n}\r\n\r\nconst Container: React.FC<Props> = (props) => {\r\n  const {children, attr, id} = props;\r\n  const {x , y , w , h, deg, opacity} = attr\r\n\r\n  const styles = {\r\n      width: w || 0,\r\n      height: h || 0,\r\n      left: x || 0,\r\n      top: y ||0 ,\r\n      transform: `rotate(${deg || 0}deg)`,\r\n      opacity: opacity || 1,\r\n  }\r\n  \r\n  return <div style={styles} className=\"absolute\" data-id={id}>\r\n      {children}\r\n  </div>;\r\n};\r\n\r\nexport default Container;","import React, { useEffect, useRef } from \"react\";\r\nimport { WithContainer } from \"../DashBoard/withContainer\";\r\nimport * as echarts from \"echarts\";\r\n\r\nconst Column4: React.FC<any> = (props) => {\r\n\r\n  const { data, config,  } = props;\r\n  const {type, width, height} = config\r\n  const boxRef = useRef(null)\r\n  const defaultOption = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        // Use axis to trigger tooltip\r\n        type: \"shadow\", // 'shadow' as default; can also be 'line' or 'shadow'\r\n      },\r\n    },\r\n    legend: {\r\n      right: \"0\",\r\n      top: \"0\",\r\n      textStyle: {\r\n        color: \"#C9EAFF\",\r\n      },\r\n    },\r\n    grid: {\r\n      left: \"0%\",\r\n      right: \"0%\",\r\n      bottom: \"0%\",\r\n      top: \"20%\",\r\n      containLabel: true,\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      splitLine: {\r\n        show: true,\r\n        lineStyle: {\r\n          color: \"rgba(255, 255, 255, 0.1)\",\r\n          type: \"dashed\",\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      data: data[0],\r\n      axisTick: {\r\n        show: false,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: \"A类\",\r\n        type: \"bar\",\r\n        stack: \"total\",\r\n        // label: {\r\n        //   show: true,\r\n        //   position: \"insideTopRight\",\r\n        //   offset: [3, -16],\r\n        //   color: \"#5D80FF\",\r\n        //   fontSize: 11,\r\n        // },\r\n        emphasis: {\r\n          focus: \"series\",\r\n        },\r\n        data: data[1],\r\n        // barWidth: 5,\r\n        itemStyle: {\r\n          // barBorderRadius: 3,\r\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            { offset: 0, color: \"rgba(93,128,255,0.80)\" },\r\n            { offset: 1, color: \"rgba(93,128,255,0.10)\" },\r\n          ]),\r\n          // color: 'rgba(93,128,255,0.80)'\r\n        },\r\n      },\r\n      {\r\n        name: \"B类\",\r\n        type: \"bar\",\r\n        stack: \"total\",\r\n        label: {\r\n          show: true,\r\n          // show: false,\r\n          position: \"top\",\r\n          offset: [0, 0],\r\n          fontSize: 11,\r\n          formatter: (params: any) => {\r\n            const { dataIndex } = params;\r\n            return `{a|${data[2][dataIndex]}}\\n\\n{b|${data[1][dataIndex]}}`\r\n          },\r\n          rich: {\r\n            a: {\r\n              color: type === 1 ? \"#9EFFF9\" : \"#F49613\",\r\n              lineHeight: 1\r\n            },\r\n            b: {\r\n              color: \"#5D80FF\",\r\n            },\r\n          },\r\n        },\r\n        emphasis: {\r\n          focus: \"series\",\r\n        },\r\n        data: data[2],\r\n        // barWidth: 5,\r\n        itemStyle: {\r\n          // barBorderRadius: 3,\r\n          color: type === 1 ? new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            { offset: 0, color: \"rgba(158,255,249,0.80)\" },\r\n            { offset: 1, color: \"rgba(158,255,249,0.30)\" },\r\n          ]) : new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n            { offset: 0, color: \"#F49613\" },\r\n            { offset: 1, color: \"rgba(249,154,19,0.30)\" },\r\n          ]),\r\n          // color: \"rgba(158,255,249,0.80)\",\r\n        },\r\n        \r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    let element = boxRef.current;\r\n    let myChart = echarts.init(element as any);\r\n    let option = defaultOption;\r\n    myChart.setOption(option);\r\n  }, []);\r\n\r\n  return <div ref={boxRef} style={{ width, height }} />;\r\n};\r\n\r\nexport default WithContainer(Column4);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"./Container\";\r\nimport request from \"../../utils/request\";\r\nimport { RequestThrottle } from \"./utils\";\r\n\r\ninterface Props {\r\n  config: DashBoard.Layer;\r\n  cacheRepeatRequest: boolean \r\n}\r\n\r\nexport function WithContainer(WrappedComponent: any) {\r\n  const ContainerFC: React.FC<Props> = (props) => {\r\n    const { config, cacheRepeatRequest } = props;\r\n    const {\r\n      config: ComponentConfig,\r\n      attr,\r\n      data,\r\n      data: { source },\r\n      id,\r\n    } = config;\r\n\r\n    const [componentData, setComponentData] = useState(source);\r\n    // useEffect(() => {\r\n    //   // 这一层去改变数据\r\n    //   const { autoUpdate, api = { url: \"\", method: \"get\", staleTime: 5 * 1000, handleRes: (res:any) => res } } = data;\r\n    //   const { url, method, staleTime, handleRes } = api;\r\n\r\n    //   const appendRequest = (RequestThrottle:any) => {\r\n    //     RequestThrottle.appendUrl(url);\r\n    //     request[method](url).then((res) => {\r\n    //       if (res.code === \"00000\") {\r\n    //         RequestThrottle.updateUrlRes(url, res);\r\n    //         const cData = handleRes? handleRes(res.data) : res.data\r\n    //         setComponentData(cData);\r\n    //       }\r\n    //     });\r\n    //   }\r\n\r\n    //   if (autoUpdate && typeof autoUpdate === \"number\") {\r\n    //     const id = setInterval(() => {\r\n    //       if (cacheRepeatRequest) {\r\n    //         const requestUrl = RequestThrottle.getUrlFromUrls(url);\r\n    //         // 有正在请求的相同的请求\r\n    //         if (requestUrl) {\r\n    //           //请求中\r\n    //           if (requestUrl.status === \"pendding\") {\r\n    //             RequestThrottle.subscribe(url, (res: any) => {\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             });\r\n    //           } else {\r\n    //             // 有请求成功的相同请求\r\n    //             const cha = new Date().getTime() - requestUrl.startTime;\r\n    //             // 该请求还未过有效期\r\n    //             if (cha >= staleTime) {\r\n    //               appendRequest(RequestThrottle)\r\n    //             } else {\r\n    //               // 过了有效期 重新发起请求\r\n    //               const { res } = requestUrl;\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             }\r\n    //           }\r\n    //         } else {\r\n    //           // 之前没有过相同的请求\r\n    //           appendRequest(RequestThrottle)\r\n    //         }\r\n    //       } else {\r\n    //         request[method](url).then((res) => {\r\n    //           if (res.code === \"00000\") {\r\n    //             const cData = handleRes? handleRes(res.data) : res.data\r\n    //             setComponentData(cData);\r\n    //           }\r\n    //         });\r\n    //       }\r\n    //     }, autoUpdate);\r\n\r\n    //     return () => {\r\n    //       clearInterval(id);\r\n    //     };\r\n    //   }\r\n    // }, []);\r\n\r\n    return (\r\n      <Container attr={attr} id={id}>\r\n        <WrappedComponent {...ComponentConfig} data={componentData} />\r\n      </Container>\r\n    );\r\n  };\r\n  return ContainerFC;\r\n}\r\n"],"sourceRoot":""}