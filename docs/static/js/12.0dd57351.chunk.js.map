{"version":3,"sources":["components/DashBoard/Container/index.tsx","components/Number2/index.tsx","components/DashBoard/withContainer.tsx"],"names":["Container","props","children","attr","id","x","y","w","h","deg","opacity","styles","width","height","left","top","transform","style","className","Number2","data","isThousands","maxLength","isShowFloat","color","backgroundColor","useState","chars","setChars","container","useRef","liRefList","isInvalidZero","getRef","dom","current","push","isNumber","str","test","useEffect","strNumber","strArr","split","length","zeroStr","zeroAddCout","i","intStr","floatStr","result","count","element","unshift","j","getSplitNumberStr","computedChars","setTimeout","strs","unUseZeroNumber","numbers","filter","numbersDom","num","roll","isvalidChar","ref","map","index","total","nowIndex","marginRight","WithContainer","WrappedComponent","config","ComponentConfig","cacheRepeatRequest","source","componentData"],"mappings":"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","file":"static/js/12.0dd57351.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Attr {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    deg: number;\r\n    opacity: number;\r\n}\r\n\r\ninterface Props {\r\n    attr: Attr\r\n    id: string\r\n}\r\n\r\nconst Container: React.FC<Props> = (props) => {\r\n  const {children, attr, id} = props;\r\n  const {x , y , w , h, deg, opacity} = attr\r\n\r\n  const styles = {\r\n      width: w || 0,\r\n      height: h || 0,\r\n      left: x || 0,\r\n      top: y ||0 ,\r\n      transform: `rotate(${deg || 0}deg)`,\r\n      opacity: opacity || 1,\r\n  }\r\n  \r\n  return <div style={styles} className=\"absolute\" data-id={id}>\r\n      {children}\r\n  </div>;\r\n};\r\n\r\nexport default Container;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { WithContainer } from \"../DashBoard/withContainer\";\r\nimport \"./index.less\";\r\n\r\ninterface Props {\r\n  data: number;\r\n  isThousands: Boolean;\r\n  maxLength?: number;\r\n  isShowFloat?: Boolean;\r\n  color: string;\r\n  backgroundColor: string;\r\n}\r\n\r\nexport const Number2 = (props: Props) => {\r\n  const {\r\n    data,\r\n    isThousands = true,\r\n    maxLength = 10,\r\n    isShowFloat = true,\r\n    color = \"rgba(93,128,255, 1)\",\r\n    backgroundColor = \"rgba(93,128,255, 0.2)\",\r\n  } = props;\r\n  const [chars, setChars] = useState<string[]>([]);\r\n  const container = useRef(null);\r\n  const liRefList = useRef<any>([]);\r\n  let isInvalidZero = true;\r\n  const getRef = (dom: any) => {\r\n    liRefList.current.push(dom);\r\n  };\r\n  // const [current, setCurrent] = useState<number>(0);\r\n  const computedChars = (data: Number) => {\r\n    let strNumber = \"\";\r\n    const strArr = `${data}`.split(\".\");\r\n\r\n    // 有小数部分\r\n    if (strArr.length > 1) {\r\n      // 只有一位小数\r\n      if (strArr[1].length === 1) {\r\n        strNumber = `${strArr[0]}.${strArr[1]}0`;\r\n      } else {\r\n        strNumber = `${data}`;\r\n      }\r\n    } else {\r\n      // 只有整数\r\n      strNumber = `${strArr[0]}.00`;\r\n    }\r\n    let chars = [];\r\n    let zeroStr = \"\";\r\n    const zeroAddCout = maxLength - strArr[0].length;\r\n    for (let i = 1; i <= zeroAddCout; i++) {\r\n      zeroStr += \"0\";\r\n    }\r\n    // 补0完成\r\n    strNumber = `${zeroStr}${strNumber}`;\r\n    const getSplitNumberStr = (str: string): string[] => {\r\n      const intStr = str.split(\".\")[0];\r\n      const floatStr = str.split(\".\")[1];\r\n      const result = [];\r\n      let count = 0;\r\n      for (let i = intStr.length - 1; i > -1; i--) {\r\n        const element = intStr[i];\r\n\r\n        if (count === 3) {\r\n          result.unshift(\",\");\r\n          count = 0;\r\n        }\r\n        result.unshift(element);\r\n        count += 1;\r\n      }\r\n      result.push(\".\");\r\n      for (let j = 0; j < floatStr.length; j++) {\r\n        const element = floatStr[j];\r\n        result.push(element);\r\n      }\r\n      return result;\r\n    };\r\n    // 增加分割符号\r\n    chars = getSplitNumberStr(strNumber);\r\n    return {\r\n      chars,\r\n      zeroAddCout,\r\n    };\r\n  };\r\n\r\n  const roll = (strs: any, unUseZeroNumber: number) => {\r\n    const numbers = strs.filter((str: string) => isNumber(str));\r\n    const numbersDom = liRefList.current;\r\n    for (let i = 0; i < numbers.length; i++) {\r\n      const num = numbers[i];\r\n      const ele = numbersDom[i];\r\n      ele.style.transform = `translate(-50%, -${num * 10}%)`;\r\n    }\r\n  };\r\n\r\n  const isNumber = (str: string) => /^\\d$/.test(str);\r\n\r\n  useEffect(() => {\r\n    const { chars, zeroAddCout } = computedChars(data);\r\n    setChars(chars);\r\n    setTimeout(() => {\r\n      roll(chars, zeroAddCout);\r\n    }, 100);\r\n    // container.current.children\r\n  }, [data]);\r\n\r\n  const isvalidChar = (str: string) => {\r\n    if (str === \"0\" || str === \",\" || str === \".\") {\r\n      if (isInvalidZero) {\r\n        return false;\r\n      } else {\r\n        isInvalidZero = false;\r\n        return true;\r\n      }\r\n    } else {\r\n      isInvalidZero = false;\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const isLastTwoChar = (total: number, nowIndex: number) => {\r\n    return nowIndex === total - 1 || nowIndex === total - 2;\r\n  };\r\n\r\n  return (\r\n    <span className=\"Number2Container\" ref={container}>\r\n      {chars.map((str: string, index) => (\r\n        // <div className={isNumber(str) ? 'numberItem' : ''}>\r\n        <div\r\n          key={index}\r\n          className={\r\n            isLastTwoChar(chars.length, index)\r\n              ? \"numberItem floatItem\"\r\n              : \"numberItem\"\r\n          }\r\n          style={{\r\n            color,\r\n            marginRight: isNumber(str) ? \"3px\" : \"0\",\r\n            opacity: isvalidChar(str) ? 1 : 0.2,\r\n          }}\r\n        >\r\n          {isNumber(str) ? (\r\n            <span ref={getRef} style={{ backgroundColor }}>\r\n              0123456789\r\n            </span>\r\n          ) : (\r\n            <i>{str}</i>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default WithContainer(Number2);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"./Container\";\r\nimport request from \"../../utils/request\";\r\nimport { RequestThrottle } from \"./utils\";\r\n\r\ninterface Props {\r\n  config: DashBoard.Layer;\r\n  cacheRepeatRequest: boolean \r\n}\r\n\r\nexport function WithContainer(WrappedComponent: any) {\r\n  const ContainerFC: React.FC<Props> = (props) => {\r\n    const { config, cacheRepeatRequest } = props;\r\n    const {\r\n      config: ComponentConfig,\r\n      attr,\r\n      data,\r\n      data: { source },\r\n      id,\r\n    } = config;\r\n\r\n    const [componentData, setComponentData] = useState(source);\r\n    // useEffect(() => {\r\n    //   // 这一层去改变数据\r\n    //   const { autoUpdate, api = { url: \"\", method: \"get\", staleTime: 5 * 1000, handleRes: (res:any) => res } } = data;\r\n    //   const { url, method, staleTime, handleRes } = api;\r\n\r\n    //   const appendRequest = (RequestThrottle:any) => {\r\n    //     RequestThrottle.appendUrl(url);\r\n    //     request[method](url).then((res) => {\r\n    //       if (res.code === \"00000\") {\r\n    //         RequestThrottle.updateUrlRes(url, res);\r\n    //         const cData = handleRes? handleRes(res.data) : res.data\r\n    //         setComponentData(cData);\r\n    //       }\r\n    //     });\r\n    //   }\r\n\r\n    //   if (autoUpdate && typeof autoUpdate === \"number\") {\r\n    //     const id = setInterval(() => {\r\n    //       if (cacheRepeatRequest) {\r\n    //         const requestUrl = RequestThrottle.getUrlFromUrls(url);\r\n    //         // 有正在请求的相同的请求\r\n    //         if (requestUrl) {\r\n    //           //请求中\r\n    //           if (requestUrl.status === \"pendding\") {\r\n    //             RequestThrottle.subscribe(url, (res: any) => {\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             });\r\n    //           } else {\r\n    //             // 有请求成功的相同请求\r\n    //             const cha = new Date().getTime() - requestUrl.startTime;\r\n    //             // 该请求还未过有效期\r\n    //             if (cha >= staleTime) {\r\n    //               appendRequest(RequestThrottle)\r\n    //             } else {\r\n    //               // 过了有效期 重新发起请求\r\n    //               const { res } = requestUrl;\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             }\r\n    //           }\r\n    //         } else {\r\n    //           // 之前没有过相同的请求\r\n    //           appendRequest(RequestThrottle)\r\n    //         }\r\n    //       } else {\r\n    //         request[method](url).then((res) => {\r\n    //           if (res.code === \"00000\") {\r\n    //             const cData = handleRes? handleRes(res.data) : res.data\r\n    //             setComponentData(cData);\r\n    //           }\r\n    //         });\r\n    //       }\r\n    //     }, autoUpdate);\r\n\r\n    //     return () => {\r\n    //       clearInterval(id);\r\n    //     };\r\n    //   }\r\n    // }, []);\r\n\r\n    return (\r\n      <Container attr={attr} id={id}>\r\n        <WrappedComponent {...ComponentConfig} data={componentData} />\r\n      </Container>\r\n    );\r\n  };\r\n  return ContainerFC;\r\n}\r\n"],"sourceRoot":""}