{"version":3,"sources":["components/DashBoard/Container/index.tsx","../node_modules/@ant-design/charts/es/plots/column/index.js","components/Column/index.tsx","components/DashBoard/withContainer.tsx"],"names":["Container","props","children","attr","id","x","y","w","h","deg","opacity","styles","width","height","left","top","transform","style","className","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","ColumnChart","forwardRef","ref","chartRef","_a","loading","loadingTemplate","errorTemplate","rest","_b","useChart","G2plotColumn","chart","container","useEffect","getChart","current","useImperativeHandle","React","createElement","ErrorBoundary","ChartLoading","configData","label","value","configDefault","xField","yField","yAxis","grid","line","stroke","lineWidth","lineDash","strokeOpacity","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","cursor","xAxis","fill","fontSize","maxColumnWidth","position","columnBackground","fillOpacity","color","meta","alias","tooltip","WithContainer","data","config","config_","cloneDeep","maxValue","maxBy","yAxisMaxValue","parseInt","max","WrappedComponent","ComponentConfig","cacheRepeatRequest","source","useState","componentData"],"mappings":"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","file":"static/js/20.e688bd16.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Attr {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    deg: number;\r\n    opacity: number;\r\n}\r\n\r\ninterface Props {\r\n    attr: Attr\r\n    id: string\r\n}\r\n\r\nconst Container: React.FC<Props> = (props) => {\r\n  const {children, attr, id} = props;\r\n  const {x , y , w , h, deg, opacity} = attr\r\n\r\n  const styles = {\r\n      width: w || 0,\r\n      height: h || 0,\r\n      left: x || 0,\r\n      top: y ||0 ,\r\n      transform: `rotate(${deg || 0}deg)`,\r\n      opacity: opacity || 1,\r\n  }\r\n  \r\n  return <div style={styles} className=\"absolute\" data-id={id}>\r\n      {children}\r\n  </div>;\r\n};\r\n\r\nexport default Container;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { Column as G2plotColumn } from '@antv/g2plot';\nimport useChart from '../../hooks/useChart';\nimport { getChart } from '../../util';\nimport { ErrorBoundary } from '../../base';\nimport ChartLoading from '../../util/createLoading';\nvar ColumnChart = forwardRef(function (props, ref) {\n    var chartRef = props.chartRef, _a = props.style, style = _a === void 0 ? {\n        height: 'inherit',\n    } : _a, className = props.className, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate, rest = __rest(props, [\"chartRef\", \"style\", \"className\", \"loading\", \"loadingTemplate\", \"errorTemplate\"]);\n    var _b = useChart(G2plotColumn, rest), chart = _b.chart, container = _b.container;\n    useEffect(function () {\n        getChart(chartRef, chart.current);\n    }, [chart.current]);\n    useImperativeHandle(ref, function () { return ({\n        getChart: function () { return chart.current; },\n    }); });\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n});\nexport default ColumnChart;\n","import React from \"react\";\r\nimport { Column } from \"@ant-design/charts\";\r\nimport { cloneDeep, maxBy } from \"lodash\";\r\nimport { WithContainer } from \"../DashBoard/withContainer\";\r\n\r\nconst configData = [\r\n  {\r\n    label: \"湖南\",\r\n    value: 3853,\r\n  },\r\n  {\r\n    label: \"广西\",\r\n    value: 5622,\r\n  },\r\n  {\r\n    label: \"广东\",\r\n    value: 6361,\r\n  },\r\n  {\r\n    label: \"四川\",\r\n    value: 1456,\r\n  },\r\n];\r\nconst configDefault = {\r\n  xField: \"label\",\r\n  yField: \"value\",\r\n  yAxis: {\r\n    grid: {\r\n      line: {\r\n        style: {\r\n          stroke: \"#fff\",\r\n          lineWidth: 1,\r\n          lineDash: [1, 4],\r\n          strokeOpacity: 0.7,\r\n          shadowColor: \"black\",\r\n          shadowBlur: 10,\r\n          shadowOffsetX: 5,\r\n          shadowOffsetY: 5,\r\n          cursor: \"pointer\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  xAxis: {\r\n    label: {\r\n      style: {\r\n        fill: \"#fff\",\r\n        opacity: 0.5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n  },\r\n  maxColumnWidth: 15,\r\n  label: {\r\n    style: {\r\n      fill: \"#ff9e0d\",\r\n      opacity: 1,\r\n      fontSize: 10,\r\n    },\r\n    position: \"top\",\r\n  },\r\n  columnBackground: {\r\n    style: {\r\n      fill: \"#fff\",\r\n      fillOpacity: 0,\r\n    },\r\n  },\r\n  color: \"l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff\",\r\n  meta: {\r\n    label: { alias: \"城市\" },\r\n    value: { alias: \"保费\" },\r\n  },\r\n  tooltip: false,\r\n};\r\n\r\nconst ColumnComponent: React.FC<any> = (props) => {\r\n  let { data = configData, config = configDefault } = props;\r\n  const config_ = cloneDeep(config);\r\n  if (data.length > 0) {\r\n    const { value: maxValue } = maxBy(data, \"value\");\r\n    const yAxisMaxValue = parseInt(`${(maxValue * 10) / 9}`, 10);\r\n    config_.yAxis.max = yAxisMaxValue;\r\n  }\r\n  return <Column {...config_} data={data} />;\r\n};\r\n\r\nexport default WithContainer(ColumnComponent);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Container from \"./Container\";\r\nimport request from \"../../utils/request\";\r\nimport { RequestThrottle } from \"./utils\";\r\n\r\ninterface Props {\r\n  config: DashBoard.Layer;\r\n  cacheRepeatRequest: boolean \r\n}\r\n\r\nexport function WithContainer(WrappedComponent: any) {\r\n  const ContainerFC: React.FC<Props> = (props) => {\r\n    const { config, cacheRepeatRequest } = props;\r\n    const {\r\n      config: ComponentConfig,\r\n      attr,\r\n      data,\r\n      data: { source },\r\n      id,\r\n    } = config;\r\n\r\n    const [componentData, setComponentData] = useState(source);\r\n    // useEffect(() => {\r\n    //   // 这一层去改变数据\r\n    //   const { autoUpdate, api = { url: \"\", method: \"get\", staleTime: 5 * 1000, handleRes: (res:any) => res } } = data;\r\n    //   const { url, method, staleTime, handleRes } = api;\r\n\r\n    //   const appendRequest = (RequestThrottle:any) => {\r\n    //     RequestThrottle.appendUrl(url);\r\n    //     request[method](url).then((res) => {\r\n    //       if (res.code === \"00000\") {\r\n    //         RequestThrottle.updateUrlRes(url, res);\r\n    //         const cData = handleRes? handleRes(res.data) : res.data\r\n    //         setComponentData(cData);\r\n    //       }\r\n    //     });\r\n    //   }\r\n\r\n    //   if (autoUpdate && typeof autoUpdate === \"number\") {\r\n    //     const id = setInterval(() => {\r\n    //       if (cacheRepeatRequest) {\r\n    //         const requestUrl = RequestThrottle.getUrlFromUrls(url);\r\n    //         // 有正在请求的相同的请求\r\n    //         if (requestUrl) {\r\n    //           //请求中\r\n    //           if (requestUrl.status === \"pendding\") {\r\n    //             RequestThrottle.subscribe(url, (res: any) => {\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             });\r\n    //           } else {\r\n    //             // 有请求成功的相同请求\r\n    //             const cha = new Date().getTime() - requestUrl.startTime;\r\n    //             // 该请求还未过有效期\r\n    //             if (cha >= staleTime) {\r\n    //               appendRequest(RequestThrottle)\r\n    //             } else {\r\n    //               // 过了有效期 重新发起请求\r\n    //               const { res } = requestUrl;\r\n    //               if (res.code === \"00000\") {\r\n    //                 const cData = handleRes? handleRes(res.data) : res.data\r\n    //                 setComponentData(cData);\r\n    //               }\r\n    //             }\r\n    //           }\r\n    //         } else {\r\n    //           // 之前没有过相同的请求\r\n    //           appendRequest(RequestThrottle)\r\n    //         }\r\n    //       } else {\r\n    //         request[method](url).then((res) => {\r\n    //           if (res.code === \"00000\") {\r\n    //             const cData = handleRes? handleRes(res.data) : res.data\r\n    //             setComponentData(cData);\r\n    //           }\r\n    //         });\r\n    //       }\r\n    //     }, autoUpdate);\r\n\r\n    //     return () => {\r\n    //       clearInterval(id);\r\n    //     };\r\n    //   }\r\n    // }, []);\r\n\r\n    return (\r\n      <Container attr={attr} id={id}>\r\n        <WrappedComponent {...ComponentConfig} data={componentData} />\r\n      </Container>\r\n    );\r\n  };\r\n  return ContainerFC;\r\n}\r\n"],"sourceRoot":""}